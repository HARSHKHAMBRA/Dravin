import React, { useState, useEffect } from "react";
import { CreateBatch } from "../components/CreateBatch";

export function BatchUpload() {
  const [showBatchUpload, setShowBatchUpload] = useState(false);
  const [formData, setFormData] = useState({
    serviceName: "",
    template: "",
    vendor: "",
    countryCode: "",
    activateQueue: "NO",
    source: "Excel/CSV",
    dataFile: null,
    sheet: "",
    batchName: "Batch_20250101_110604",
    batchStartDate: "2025-01-01T00:00",
    batchEndDate: "2025-01-01T23:59",
    importTime: "2025-01-01T11:08",
    dncCheck: "NO",
    fieldRulesCheck: "NO",
    invalidListCheck: "NO",
    zonesCheck: "NO",
    dncAction: "0",
    saveAsTemplate: "",
  });

  const [filters, setFilters] = useState({
    batchName: "",
    zone: "",
    status: "",
    serviceName: "",
    serviceId: "",
    lastDataFile: "",
    batchStartDate: "",
    batchEndDate: "",
    lastActivity: "",
    sourceCount: "",
    importCount: "",
    rejected: "",
    freshPending: "",
    retryPending: "",
  });

  const [currentPage, setCurrentPage] = useState(1);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [selectedRows, setSelectedRows] = useState([]);
  const [editMode, setEditMode] = useState(null);
  const [showCreateBatchModal, setShowCreateBatchModal] = useState(false);

  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  // Debounced search logic
  useEffect(() => {
    const timer = setTimeout(() => {
      // API call or filtering logic after the user stops typing
      console.log("Filters updated:", filters);
    }, 500);
    return () => clearTimeout(timer);
  }, [filters]);

  const handleRowSelect = (id) => {
    if (selectedRows.includes(id)) {
      setSelectedRows(selectedRows.filter((row) => row !== id));
    } else {
      setSelectedRows([...selectedRows, id]);
    }
  };

  const handleEdit = (row) => {
    setEditMode(row);
  };

  const handleDelete = (batchName) => {
    try {
      alert(`Deleting batch: ${batchName}`);
      // Add actual delete logic here (e.g., API request)
    } catch (error) {
      alert("Error deleting batch: " + error.message);
    }
  };

  const handleView = (row) => {
    alert(`Viewing batch details: ${JSON.stringify(row)}`);
  };

  const handleExport = () => {
    alert("Exporting data to CSV");
    // Add export functionality (e.g., API request or CSV file generation)
  };

  const filteredData = [
    {
      batchName: "Batch_20250101_103301",
      zone: "AAA",
      status: "A-Active",
      serviceName: "Madhumalya",
      serviceId: 22,
      lastDataFile: "01-01-2025_mm.csv",
      batchStartDate: "00:00 AM",
      batchEndDate: "Jan 31",
      lastActivity: "10:33 AM",
      sourceCount: 11,
      importCount: 11,
      rejected: 0,
      freshPending: 8,
      retryPending: 1,
    },
  ]
    .filter((row) => {
      return Object.keys(filters).every((key) => {
        return row[key]
          .toString()
          .toLowerCase()
          .includes(filters[key].toLowerCase());
      });
    });

  const indexOfLastRow = currentPage * rowsPerPage;
  const indexOfFirstRow = indexOfLastRow - rowsPerPage;
  const currentRows = filteredData.slice(indexOfFirstRow, indexOfLastRow);

  const handlePageChange = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  const handleRowsPerPageChange = (e) => {
    setRowsPerPage(Number(e.target.value));
    setCurrentPage(1);
  };

  const handleSubmit = () => {
    console.log("Form Data Submitted:", formData);
    setShowCreateBatchModal(false); // Close the modal after submission
    // Perform API request or action here
  };

  const handleBatchFormChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  return (
    <div className="flex-1 flex flex-col">
      {/* Top bar for batch upload toggle */}
      <div className="bg-orange-500 p-4 flex items-center justify-between">
        <div className="flex items-center">
          <button className="text-white mr-4">
            <i className="fas fa-bars"></i>
          </button>
          <input
            className="p-2 rounded bg-white"
            placeholder="Batch Search.."
            type="text"
            onChange={handleFilterChange} // Bind to filters
          />
          <button className="text-white ml-2">
            <i className="fas fa-search"></i>
          </button>
        </div>
        {/* Icons for settings */}
        <div className="flex items-center">
          <button className="text-white mr-4">
            <i className="fas fa-th-large"></i>
          </button>
          <button className="text-white mr-4">
            <i className="fas fa-heart"></i>
          </button>
          <button className="text-white mr-4">
            <i className="fas fa-cog"></i>
          </button>
          <button className="text-white mr-4">
            <i className="fas fa-user-circle"></i>
          </button>
        </div>
      </div>

      {/* Toggle between Batch Upload Page and Other Page */}
      <div className="bg-gray-200 p-4 flex items-center justify-between">
        <div className="flex items-center">
          <button
            onClick={() => setShowBatchUpload(!showBatchUpload)} // Toggle the page view
            className="bg-blue-500 text-white px-4 py-2 rounded"
          >
            {showBatchUpload ? "Hide Batch Upload Page" : "Show Batch Upload Page"}
          </button>
        </div>
      </div>

      {/* Show batch upload table when visible */}
      {showBatchUpload && (
        <div className="flex-1 overflow-auto p-4">
          <table className="min-w-full bg-white">
            <thead>
              <tr className="w-full bg-gray-200 text-left">
                <th className="p-2">
                  <input
                    type="checkbox"
                    onChange={() => {
                      if (selectedRows.length === currentRows.length) {
                        setSelectedRows([]);
                      } else {
                        setSelectedRows(currentRows.map((row) => row.batchName));
                      }
                    }}
                  />
                </th>
                <th className="p-2">Batch Name</th>
                <th className="p-2">Zone</th>
                <th className="p-2">Status</th>
                <th className="p-2">Service Name</th>
                <th className="p-2">Service ID</th>
                <th className="p-2">Last Data File</th>
                <th className="p-2">Batch Start Date</th>
                <th className="p-2">Batch End Date</th>
                <th className="p-2">Last Activity</th>
                <th className="p-2">Source Count</th>
                <th className="p-2">Import Count</th>
                <th className="p-2">Rejected</th>
                <th className="p-2">Fresh Pending</th>
                <th className="p-2">Retry Pending</th>
                <th className="p-2">Actions</th>
              </tr>
            </thead>
            <tbody>
              {currentRows.map((row, index) => (
                <tr key={index} className="border-b">
                  <td className="p-2">
                    <input
                      type="checkbox"
                      checked={selectedRows.includes(row.batchName)}
                      onChange={() => handleRowSelect(row.batchName)}
                    />
                  </td>
                  <td className="p-2">{row.batchName}</td>
                  <td className="p-2">{row.zone}</td>
                  <td className="p-2">
                    <span className="bg-green-500 text-white px-2 py-1 rounded">
                      {row.status}
                    </span>
                  </td>
                  <td className="p-2">{row.serviceName}</td>
                  <td className="p-2">{row.serviceId}</td>
                  <td className="p-2">{row.lastDataFile}</td>
                  <td className="p-2">{row.batchStartDate}</td>
                  <td className="p-2">{row.batchEndDate}</td>
                  <td className="p-2">{row.lastActivity}</td>
                  <td className="p-2">{row.sourceCount}</td>
                  <td className="p-2">{row.importCount}</td>
                  <td className="p-2">{row.rejected}</td>
                  <td className="p-2">{row.freshPending}</td>
                  <td className="p-2">{row.retryPending}</td>
                  <td className="p-2">
                    <button
                      onClick={() => handleEdit(row)}
                      className="mr-2 text-blue-500"
                    >
                      <i className="fas fa-edit"></i> Edit
                    </button>
                    <button
                      onClick={() => handleView(row)}
                      className="mr-2 text-green-500"
                    >
                      <i className="fas fa-eye"></i> View
                    </button>
                    <button
                      onClick={() => handleDelete(row.batchName)}
                      className="mr-2 text-red-500"
                    >
                      <i className="fas fa-trash-alt"></i> Delete
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
          {/* Pagination Controls */}
          <div className="flex justify-between items-center mt-4">
            <div className="flex items-center">
              <label className="mr-2">Rows per page:</label>
              <select
                value={rowsPerPage}
                onChange={handleRowsPerPageChange}
                className="px-2 py-1 rounded border"
              >
                <option value={5}>5</option>
                <option value={10}>10</option>
                <option value={20}>20</option>
              </select>
            </div>
            <div>
              <button
                onClick={() => handlePageChange(currentPage - 1)}
                className="mr-2"
                disabled={currentPage === 1}
              >
                Previous
              </button>
              <button
                onClick={() => handlePageChange(currentPage + 1)}
                className="ml-2"
                disabled={currentPage * rowsPerPage >= filteredData.length}
              >
                Next
              </button>
            </div>
          </div>
        </div>
      )}

      
    </div>
  );
}
